/**
 * This class is generated by jOOQ
 */
package com.example.mindoc_transfer.db.pojo.tables;


import com.example.mindoc_transfer.db.pojo.Keys;
import com.example.mindoc_transfer.db.pojo.MindocDb;
import com.example.mindoc_transfer.db.pojo.tables.records.MdLogsRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MdLogs extends TableImpl<MdLogsRecord> {

    private static final long serialVersionUID = -1584791236;

    /**
     * The reference instance of <code>mindoc_db.md_logs</code>
     */
    public static final MdLogs MD_LOGS = new MdLogs();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MdLogsRecord> getRecordType() {
        return MdLogsRecord.class;
    }

    /**
     * The column <code>mindoc_db.md_logs.log_id</code>.
     */
    public final TableField<MdLogsRecord, Long> LOG_ID = createField("log_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>mindoc_db.md_logs.member_id</code>.
     */
    public final TableField<MdLogsRecord, Integer> MEMBER_ID = createField("member_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>mindoc_db.md_logs.category</code>.
     */
    public final TableField<MdLogsRecord, String> CATEGORY = createField("category", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false).defaultValue(org.jooq.impl.DSL.field("operate", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>mindoc_db.md_logs.content</code>.
     */
    public final TableField<MdLogsRecord, String> CONTENT = createField("content", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>mindoc_db.md_logs.original_data</code>.
     */
    public final TableField<MdLogsRecord, String> ORIGINAL_DATA = createField("original_data", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>mindoc_db.md_logs.present_data</code>.
     */
    public final TableField<MdLogsRecord, String> PRESENT_DATA = createField("present_data", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>mindoc_db.md_logs.create_time</code>.
     */
    public final TableField<MdLogsRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>mindoc_db.md_logs.user_agent</code>.
     */
    public final TableField<MdLogsRecord, String> USER_AGENT = createField("user_agent", org.jooq.impl.SQLDataType.VARCHAR.length(500).nullable(false).defaultValue(org.jooq.impl.DSL.field("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>mindoc_db.md_logs.ip_address</code>.
     */
    public final TableField<MdLogsRecord, String> IP_ADDRESS = createField("ip_address", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false).defaultValue(org.jooq.impl.DSL.field("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>mindoc_db.md_logs</code> table reference
     */
    public MdLogs() {
        this("md_logs", null);
    }

    /**
     * Create an aliased <code>mindoc_db.md_logs</code> table reference
     */
    public MdLogs(String alias) {
        this(alias, MD_LOGS);
    }

    private MdLogs(String alias, Table<MdLogsRecord> aliased) {
        this(alias, aliased, null);
    }

    private MdLogs(String alias, Table<MdLogsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return MindocDb.MINDOC_DB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<MdLogsRecord, Long> getIdentity() {
        return Keys.IDENTITY_MD_LOGS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<MdLogsRecord> getPrimaryKey() {
        return Keys.KEY_MD_LOGS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MdLogsRecord>> getKeys() {
        return Arrays.<UniqueKey<MdLogsRecord>>asList(Keys.KEY_MD_LOGS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MdLogs as(String alias) {
        return new MdLogs(alias, this);
    }

    /**
     * Rename this table
     */
    public MdLogs rename(String name) {
        return new MdLogs(name, null);
    }
}
